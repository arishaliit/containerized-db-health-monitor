# This GitHub Actions workflow automates the execution of the database health monitor.
# It runs on every push to the 'main' branch and on a daily schedule.
name: Database Health Monitor CI/CD

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

jobs:
  run-health-checks:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify a Python version

      - name: Install Python dependencies
        run: pip install psycopg2-binary # Install the PostgreSQL adapter for Python

      - name: Start Dockerized Database and Run Monitor
        # This command will:
        # 1. Build the 'monitor' service image if needed (--build)
        # 2. Start both 'db' and 'monitor' services
        # 3. Wait for the 'monitor' service to exit (--exit-code-from monitor)
        # 4. If the 'monitor' service exits with a non-zero code, the entire 'docker compose up' command will fail,
        #    causing this GitHub Actions step to fail.
        # 5. --abort-on-container-exit ensures all services are stopped if any container exits.
        run: |
          docker compose -f docker-compose.yml up --build --abort-on-container-exit --exit-code-from monitor

      - name: Report Health Check Status
        # This step will only run if the previous 'Start Dockerized Database and Run Monitor' step passed (i.e., monitor exited with code 0)
        run: echo "--- Database Health Checks PASSED ---"

      - name: Stop and Remove Containers
        if: always() # Ensure this step runs even if previous steps fail
        # Use 'docker compose' (without hyphen) for cleanup
        run: docker compose -f docker-compose.yml down -v
